{"version":3,"file":"component---src-pages-index-tsx-977b7c810b762c8ecbad.js","mappings":"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","sources":["webpack://moztiq.github.io/./node_modules/framer-motion/dist/es/utils/use-is-mounted.mjs","webpack://moztiq.github.io/./node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.mjs","webpack://moztiq.github.io/./node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.mjs","webpack://moztiq.github.io/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs","webpack://moztiq.github.io/./node_modules/framer-motion/dist/es/utils/use-force-update.mjs","webpack://moztiq.github.io/./node_modules/framer-motion/dist/es/utils/use-unmount-effect.mjs","webpack://moztiq.github.io/./src/components/quote/QuoteAnimation.tsx","webpack://moztiq.github.io/./src/pages/index.tsx"],"sourcesContent":["import { useRef } from 'react';\nimport { useIsomorphicLayoutEffect } from './use-isomorphic-effect.mjs';\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n    useIsomorphicLayoutEffect(() => {\n        isMounted.current = true;\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n}\n\nexport { useIsMounted };\n","import * as React from 'react';\nimport { useId, useRef, useInsertionEffect } from 'react';\n\n/**\n * Measurement functionality has to be within a separate component\n * to leverage snapshot lifecycle.\n */\nclass PopChildMeasure extends React.Component {\n    getSnapshotBeforeUpdate(prevProps) {\n        const element = this.props.childRef.current;\n        if (element && prevProps.isPresent && !this.props.isPresent) {\n            const size = this.props.sizeRef.current;\n            size.height = element.offsetHeight || 0;\n            size.width = element.offsetWidth || 0;\n            size.top = element.offsetTop;\n            size.left = element.offsetLeft;\n        }\n        return null;\n    }\n    /**\n     * Required with getSnapshotBeforeUpdate to stop React complaining.\n     */\n    componentDidUpdate() { }\n    render() {\n        return this.props.children;\n    }\n}\nfunction PopChild({ children, isPresent }) {\n    const id = useId();\n    const ref = useRef(null);\n    const size = useRef({\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n    });\n    /**\n     * We create and inject a style block so we can apply this explicit\n     * sizing in a non-destructive manner by just deleting the style block.\n     *\n     * We can't apply size via render as the measurement happens\n     * in getSnapshotBeforeUpdate (post-render), likewise if we apply the\n     * styles directly on the DOM node, we might be overwriting\n     * styles set via the style prop.\n     */\n    useInsertionEffect(() => {\n        const { width, height, top, left } = size.current;\n        if (isPresent || !ref.current || !width || !height)\n            return;\n        ref.current.dataset.motionPopId = id;\n        const style = document.createElement(\"style\");\n        document.head.appendChild(style);\n        if (style.sheet) {\n            style.sheet.insertRule(`\n          [data-motion-pop-id=\"${id}\"] {\n            position: absolute !important;\n            width: ${width}px !important;\n            height: ${height}px !important;\n            top: ${top}px !important;\n            left: ${left}px !important;\n          }\n        `);\n        }\n        return () => {\n            document.head.removeChild(style);\n        };\n    }, [isPresent]);\n    return (React.createElement(PopChildMeasure, { isPresent: isPresent, childRef: ref, sizeRef: size }, React.cloneElement(children, { ref })));\n}\n\nexport { PopChild };\n","import * as React from 'react';\nimport { useId, useMemo } from 'react';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { PopChild } from './PopChild.mjs';\n\nconst PresenceChild = ({ children, initial, isPresent, onExitComplete, custom, presenceAffectsLayout, mode, }) => {\n    const presenceChildren = useConstant(newChildrenMap);\n    const id = useId();\n    const context = useMemo(() => ({\n        id,\n        initial,\n        isPresent,\n        custom,\n        onExitComplete: (childId) => {\n            presenceChildren.set(childId, true);\n            for (const isComplete of presenceChildren.values()) {\n                if (!isComplete)\n                    return; // can stop searching when any is incomplete\n            }\n            onExitComplete && onExitComplete();\n        },\n        register: (childId) => {\n            presenceChildren.set(childId, false);\n            return () => presenceChildren.delete(childId);\n        },\n    }), \n    /**\n     * If the presence of a child affects the layout of the components around it,\n     * we want to make a new context value to ensure they get re-rendered\n     * so they can detect that layout change.\n     */\n    presenceAffectsLayout ? undefined : [isPresent]);\n    useMemo(() => {\n        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));\n    }, [isPresent]);\n    /**\n     * If there's no `motion` components to fire exit animations, we want to remove this\n     * component immediately.\n     */\n    React.useEffect(() => {\n        !isPresent &&\n            !presenceChildren.size &&\n            onExitComplete &&\n            onExitComplete();\n    }, [isPresent]);\n    if (mode === \"popLayout\") {\n        children = React.createElement(PopChild, { isPresent: isPresent }, children);\n    }\n    return (React.createElement(PresenceContext.Provider, { value: context }, children));\n};\nfunction newChildrenMap() {\n    return new Map();\n}\n\nexport { PresenceChild };\n","import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { invariant } from '../../utils/errors.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    invariant(!exitBeforeEnter, \"Replace exitBeforeEnter with mode='wait'\");\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    const forceRender = useContext(LayoutGroupContext).forceRender || useForceUpdate()[0];\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exitingChildren = useRef(new Map()).current;\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exitingChildren.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1 && !exitingChildren.has(key)) {\n            exitingChildren.set(key, undefined);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exitingChildren.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exitingChildren.forEach((component, key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        let exitingComponent = component;\n        if (!exitingComponent) {\n            const onExit = () => {\n                // clean up the exiting children map\n                exitingChildren.delete(key);\n                // compute the keys of children that were rendered once but are no longer present\n                // this could happen in case of too many fast consequent renderings\n                // @link https://github.com/framer/motion/issues/2023\n                const leftOverKeys = Array.from(allChildren.keys()).filter((childKey) => !targetKeys.includes(childKey));\n                // clean up the all children map\n                leftOverKeys.forEach((leftOverKey) => allChildren.delete(leftOverKey));\n                // make sure to render only the children that are actually visible\n                presentChildren.current = filteredChildren.filter((presentChild) => {\n                    const presentChildKey = getChildKey(presentChild);\n                    return (\n                    // filter out the node exiting\n                    presentChildKey === key ||\n                        // filter out the leftover children\n                        leftOverKeys.includes(presentChildKey));\n                });\n                // Defer re-rendering until all exiting children have indeed left\n                if (!exitingChildren.size) {\n                    if (isMounted.current === false)\n                        return;\n                    forceRender();\n                    onExitComplete && onExitComplete();\n                }\n            };\n            exitingComponent = (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n            exitingChildren.set(key, exitingComponent);\n        }\n        childrenToRender.splice(insertionIndex, 0, exitingComponent);\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exitingChildren.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (process.env.NODE_ENV !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exitingChildren.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n","import { useState, useCallback } from 'react';\nimport { useIsMounted } from './use-is-mounted.mjs';\nimport { frame } from '../frameloop/frame.mjs';\n\nfunction useForceUpdate() {\n    const isMounted = useIsMounted();\n    const [forcedRenderCount, setForcedRenderCount] = useState(0);\n    const forceRender = useCallback(() => {\n        isMounted.current && setForcedRenderCount(forcedRenderCount + 1);\n    }, [forcedRenderCount]);\n    /**\n     * Defer this to the end of the next animation frame in case there are multiple\n     * synchronous calls.\n     */\n    const deferredForceRender = useCallback(() => frame.postRender(forceRender), [forceRender]);\n    return [deferredForceRender, forcedRenderCount];\n}\n\nexport { useForceUpdate };\n","import { useEffect } from 'react';\n\nfunction useUnmountEffect(callback) {\n    return useEffect(() => () => callback(), []);\n}\n\nexport { useUnmountEffect };\n","import React, { useEffect, useState } from 'react';\nimport { AnimatePresence, motion } from 'framer-motion';\n\nexport default function QuoteAnimation(props: { text: string }) {\n  const contentArr = props.text\n    .split('\\n')\n    .map((str) => {\n      return str;\n    })\n    .join('<br/>')\n    .split(/(<[^>]+>)/g)\n    .reduce((acc, curr) => {\n      if (/(<[^>]+>)/g.test(curr)) {\n        return [...acc, curr];\n      }\n      return acc.concat(curr.split(''));\n    }, [] as string[]);\n\n  const [displayedTextArr, setDisplayedTextArr] = useState<string[]>([]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (displayedTextArr.length == contentArr.length) return;\n      const newArr = contentArr?.slice(0, displayedTextArr.length + 1);\n      setDisplayedTextArr(newArr);\n    }, 100);\n    if (displayedTextArr.length == contentArr.length) {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    }\n    return () => clearTimeout(timeoutId);\n  }, [displayedTextArr, contentArr]);\n\n  return (\n    <AnimatePresence>\n      <motion.span\n        initial={{ opacity: 0, y: -10 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: 10 }}\n        dangerouslySetInnerHTML={{\n          __html: displayedTextArr.join('') || '',\n        }}\n      />\n    </AnimatePresence>\n  );\n}\n","import * as React from 'react';\nimport type { PageProps } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../components/Layout';\nimport Seo from '../components/Seo';\nimport QuoteAnimation from '../components/quote/QuoteAnimation';\n\nconst Content = styled.div`\n  width: 100%;\n  height: 100vh;\n  background-color: ${(props) => props.theme.colors.background};\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n\n  @media screen and (max-width: 768px) {\n    position: absolute;\n    padding: 10px 0;\n  }\n`;\n\nconst QuoteBox = styled.div`\n  padding: 70px;\n  width: 50%;\n  color: ${(props) => props.theme.colors.textPrimary};\n  background-color: ${(props) => props.theme.colors.background};\n\n  @media screen and (max-width: 768px) {\n    padding: 30px;\n    width: 80%;\n    margin-top: 30px;\n  }\n`;\n\nconst Quote = styled.div`\n  font-size: 1.8rem;\n  font-weight: bold;\n  text-align: justify;\n  letter-spacing: 2px;\n\n  div:last-child {\n    margin: 50px 0;\n    font-size: 1.2rem;\n  }\n  div:first-child {\n    margin: 50px 0;\n    font-size: 1.6rem;\n  }\n\n  @media screen and (max-width: 430px) {\n    font-size: 1.6rem;\n    div {\n      display: none;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    div:last-child {\n      font-size: 1.2rem;\n      display: none;\n    }\n  }\n`;\n\nconst Author = styled.div`\n  margin-top: 40px;\n  text-align: right;\n  font-weight: bold;\n  font-size: 1.2rem;\n  letter-spacing: 2px;\n\n  @media screen and (max-width: 430px) {\n    font-size: 1.1rem;\n  }\n`;\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <Layout>\n      <Content>\n        <QuoteBox>\n          <Quote>\n            <QuoteAnimation\n              text={`모두 개안심꺼?          <div>안 개안심꺼?          </div><div>저는 개안심더.</div>`}\n            />\n          </Quote>\n          <Author>- MOZTIQ</Author>\n        </QuoteBox>\n      </Content>\n    </Layout>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head = () => {\n  return (\n    <Seo\n      title={'HOME'}\n      description={'MOZTIQ, Experimental Personal Logs'}\n      url={`/`}\n    />\n  );\n};\n"],"names":["useIsMounted","isMounted","useRef","current","PopChildMeasure","getSnapshotBeforeUpdate","prevProps","element","this","props","childRef","isPresent","size","sizeRef","height","offsetHeight","width","offsetWidth","top","offsetTop","left","offsetLeft","componentDidUpdate","render","children","PopChild","id","useId","ref","useInsertionEffect","dataset","motionPopId","style","document","createElement","head","appendChild","sheet","insertRule","removeChild","PresenceChild","initial","onExitComplete","custom","presenceAffectsLayout","mode","presenceChildren","newChildrenMap","context","useMemo","childId","set","isComplete","values","register","delete","undefined","forEach","_","key","PresenceContext","Provider","value","Map","getChildKey","child","AnimatePresence","exitBeforeEnter","forceRender","useContext","LayoutGroupContext","forcedRenderCount","setForcedRenderCount","useState","useCallback","postRender","useForceUpdate","filteredChildren","filtered","Children","isValidElement","push","onlyElements","childrenToRender","exitingChildren","presentChildren","allChildren","isInitialRender","callback","updateChildLookup","clear","useEffect","map","presentKeys","targetKeys","numPresent","length","i","indexOf","has","component","get","insertionIndex","exitingComponent","onExit","leftOverKeys","Array","from","keys","filter","childKey","includes","leftOverKey","presentChild","presentChildKey","splice","cloneElement","QuoteAnimation","contentArr","text","split","str","join","reduce","acc","curr","test","concat","_toConsumableArray","displayedTextArr","setDisplayedTextArr","timeoutId","setTimeout","newArr","slice","clearTimeout","React","motion","span","opacity","y","animate","exit","dangerouslySetInnerHTML","__html","Content","styled","div","withConfig","displayName","componentId","theme","colors","background","QuoteBox","textPrimary","Quote","Author","IndexPage","Layout","Head","Seo","title","description","url"],"sourceRoot":""}