{"componentChunkName":"component---src-pages-tech-index-tsx","path":"/tech/","result":{"data":{"allContentfulMoztiqBlog":{"nodes":[{"id":"f58804ae-1011-537b-ab59-f91d20c0d9cc","title":"[노마드코더 플러터] 2023.11.16 Dart Classes","slug":"nc-flutter-dart-class","category":"tech","releaseDate":"2023-11-16T00:00+09:00","headerImage":{"url":"https://images.ctfassets.net/vpyfljks33op/6Fp0DvO0YB7DvuyEAV1RC3/7232b988673f1b5632d7ae1a84be3034/Screen_Shot_2021-02-10_at_9.40.36_AM.png"},"contents":{"childMarkdownRemark":{"html":"<h3>Dart Class 기본 사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// class 에서 property 를 선언할 때는 타입을 사용한다. (↔ function 에서 variable 을 사용할 때는 var )</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> nickname <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 변경할 수 없게 final 로 선언</span>\n  int xp <span class=\"token operator\">=</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this 를 사용하지 않아도 됨</span>\n\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 동일한 이름의 variable 이 method 내에 있을 경우는 this 로 참조 </span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// new 를 붙여도 되지만 없어도 됨</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// moz</span>\n  player<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'tiq'</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tiq</span>\n\n  player<span class=\"token punctuation\">.</span>nickname <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'tiq'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n\n  player<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Constructor (생성자)</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// All final variables must be initialized, but 'name' isn't.</span>\n  int xp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Non-nullable instance field 'xp' must be initialized.</span>\n\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> int xp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// constructor</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'name' can't be used as a setter because it's final.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Error 유형 (아래 3가지 모두 해당) : <a href=\"https://dart.dev/tools/diagnostic-messages?utm_source=dartdev&#x26;utm_medium=redir&#x26;utm_id=diagcode&#x26;utm_content=not_initialized_non_nullable_instance_field#not_initialized_non_nullable_instance_field\">Non-nullable instance field {0} must be initialized.</a>\n<ul>\n<li>null 이 될 수 없는 유형의 타입인 경우</li>\n<li>초기화되지 않은 경우</li>\n<li>late 로 처리되지 않은 경우</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// late 로 처리를 하면 위에서 발생한 에러가 해결된다.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  late <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  late int xp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// constructor</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> int xp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> xp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 훨씬 간결해진 표현</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// late 도 제거할 수 있다.</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  int xp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// constructor</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 중복선언된 타입을 제거할 수 있다.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Named Constructor Parameters</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  int xp<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> team<span class=\"token punctuation\">;</span>\n  int age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// The parameter {0} can't have a value of 'null' because of its type, but the implicit default value is 'null'.</span>\n  <span class=\"token comment\">// Positional Constructor 에서 Named Constructor 로 변경하면 에러가 발생하게 되는데 required 키워드를 붙임으로써 해결</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 파라미터 순서와 상관없이 값을 입력할 수 있음</span>\n  <span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> team<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'art'</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> player2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'tho'</span></span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'ben'</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Named Constructor</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  int xp<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> team<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// team, xp 에 기본값을 설정한 Named Constructor with named parameters</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token function\">createBluePlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> required int age<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'blue'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// team, xp 에 기본값을 설정한 Named Constructor with positional parameters</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRedPlayer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> int age<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'red'</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token function\">createBluePlayer</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">:</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> player2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token function\">createRedPlayer</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'ben'</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Named Constructor 를 이용한 API 연동 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  int xp<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> team<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">dynamic</span><span class=\"token punctuation\">></span></span> playerJson<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span> name <span class=\"token operator\">=</span> playerJson<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        xp <span class=\"token operator\">=</span> playerJson<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'xp'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        team <span class=\"token operator\">=</span> playerJson<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'team'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> apiData <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string-literal\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"moz\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"xp\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"team\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"tiq\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string-literal\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"tho\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"xp\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"team\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ven\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span><span class=\"token string-literal\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"shu\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"xp\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">\"team\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"ber\"</span></span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  apiData<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>playerJson<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>playerJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    player<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Cascade Notation</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  int xp<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">String</span> team<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> moz <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> team<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'red'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  moz<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'tiq'</span></span><span class=\"token punctuation\">;</span>\n  moz<span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n  moz<span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'blue'</span></span><span class=\"token punctuation\">;</span>\n  moz<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Cascade Notation</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'bee'</span></span><span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> team<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'red'</span></span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'tho'</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'green'</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Enums</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// \"red\" 와 같이 문자열 형태로 쓰지 않아도 된다.</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span> red<span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">XPLevel</span> <span class=\"token punctuation\">{</span>beginner<span class=\"token punctuation\">,</span> medium<span class=\"token punctuation\">,</span> pro<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">XPLevel</span> xp<span class=\"token punctuation\">;</span> <span class=\"token comment\">// enum XPLevel 타입으로 변경되었다.</span>\n  <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span> <span class=\"token comment\">// enum Team 타입으로 변경되었다.</span>\n\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>xp<span class=\"token punctuation\">,</span>\n    required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> moz <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> xp<span class=\"token punctuation\">:</span> <span class=\"token class-name\">XPLevel</span><span class=\"token punctuation\">.</span>beginner<span class=\"token punctuation\">,</span> team<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span>blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  moz<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  moz\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'tho'</span></span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>xp <span class=\"token operator\">=</span> <span class=\"token class-name\">XPLevel</span><span class=\"token punctuation\">.</span>pro\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>team <span class=\"token operator\">=</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span>red\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Abstract Classes</h3>\n<ul>\n<li>추상화 클래스로는 객체를 생성할 수 없다.</li>\n<li>다른 클래스들이 직접 구현해야하는 메소드들을 모아놓은 일종의 청사진 (Blueprint)</li>\n<li>특정 메소드를 구현하도록 강제한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// 구현하지 않으면 에러 발생</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'I am walking'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Inheritance</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Human(this.name); // positional parameter</span>\n  <span class=\"token class-name\">Human</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// named parameter</span>\n  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hi my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span> red<span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Human</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/// 부모객체에서 필요한 값을 초기화</span>\n\n  <span class=\"token comment\">// 부모객체의 생성자가 named parameter 인 경우</span>\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">,</span> required <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">:</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 부모객체의 생성자가 positional parameter 인 경우</span>\n  <span class=\"token comment\">// Player({required this.team, required String name}) : super(name);</span>\n\n  <span class=\"token comment\">// super parameter 를 쓰는 것을 권장하고 있다.</span>\n  <span class=\"token comment\">// Player({required this.team, required super.name});</span>\n\n  <span class=\"token metadata function\">@override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'and I play for </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">team</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span>team<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">.</span>red<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  player<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Mixins</h3>\n<ul>\n<li>Mixin : 생성자가 없는 클래스</li>\n<li>하나의 클래스에만 사용한다면 의미가 없다.</li>\n<li>핵심은 여러 클래스에 재사용이 가능하다는 점이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// mixin class</span>\n<span class=\"token keyword\">mixin</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Strong</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> double stengthLevel <span class=\"token operator\">=</span> <span class=\"token number\">1500.99</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">mixin</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickRunner</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">runQuick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'ruuuuuuun!'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">mixin</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Tall</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> double height <span class=\"token operator\">=</span> <span class=\"token number\">1.99</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">Team</span> <span class=\"token punctuation\">{</span> red<span class=\"token punctuation\">,</span> blue <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">with</span> <span class=\"token class-name\">Strong</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">QuickRunner</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Tall</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>required <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>team<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Horse</span> <span class=\"token keyword\">with</span> <span class=\"token class-name\">Strong</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">QuickRunner</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Kid</span> <span class=\"token keyword\">with</span> <span class=\"token class-name\">QuickRunner</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>"}},"tag":["노마드코더","플러터","Dart"]},{"id":"d712bbb0-33cc-5819-89a0-582966241ed1","title":"[노마드코더 플러터] 2023.11.15 Dart Function (함수)","slug":"nc-flutter-dart-function","category":"tech","releaseDate":"2023-11-15T00:00+09:00","headerImage":{"url":"https://images.ctfassets.net/vpyfljks33op/3vXmLgMrqTNAYEmKrCUAYh/8c1892f4ba92aa8bac46a1c0c8be0818/Screen_Shot_2021-02-10_at_9.40.23_AM.png"},"contents":{"childMarkdownRemark":{"html":"<h3>Function(함수) 의 정의</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/**\n  main 함수 바깥에 함수를 정의해도 상관없음\n  name 이라는 문자열 매개변수를 받고 문자열을 리턴\n */</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\">, nice to meet you\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// fat arrow syntax</span>\n<span class=\"token comment\">// 한 줄짜리 함수인 경우 다음과 같이 줄여 쓸 수 있다.</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> nice to meet you\"</span></span><span class=\"token punctuation\">;</span>\nnum <span class=\"token function\">plus</span><span class=\"token punctuation\">(</span>num a<span class=\"token punctuation\">,</span> num b<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// void : 아무것도 리턴하지 않음</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Named Parameters</h3>\n<ul>\n<li>\n<p>Positional parameter (일반적인 매개변수 사용법)</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 각 매개변수가 무엇을 의미하는지 알기가 힘들다.  </span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> int age<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> country<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> nice to meet you, you are </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old from </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">country</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'korea'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><strong>Named Parameter</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// default value 를 설정할 수 있음</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> \n  int age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> \n  <span class=\"token class-name\">String</span> country <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'korea'</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> nice to meet you, you are </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old from </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">country</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// default value 를 지정하고 싶지 않다면? required</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  required <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> \n  required int age<span class=\"token punctuation\">,</span> \n  required <span class=\"token class-name\">String</span> country\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> nice to meet you, you are </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old from </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">country</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 매개변수 순서를 기억할 필요가 없음</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>\n    age<span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n    country<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'korea'</span></span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>Optional Positional Parameters</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// Non-optional parameters can't have a default value.</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> int age<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token class-name\">String</span><span class=\"token operator\">?</span> country <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'korea'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> nice to meet you, you are </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">age</span></span><span class=\"token string\"> years old from </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">country</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>QQ Operator</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// Case 1</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">capitalizeName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">?</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">'TIQ'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Case 2</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">capitalizeName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">?</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> name <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'TIQ'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Case 3 (QQ)</span>\n<span class=\"token class-name\">String</span> <span class=\"token function\">capitalizeName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">?</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> name<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token string-literal\"><span class=\"token string\">'TIQ'</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">capitalizeName</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// MOZ</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">capitalizeName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TIQ</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// QQ assigned operator</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">String</span><span class=\"token operator\">?</span> name<span class=\"token punctuation\">;</span>\n  name <span class=\"token operator\">?</span><span class=\"token operator\">?</span><span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// name 이 null 이면 moz 할당</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// moz</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Typedef</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 자료형에 alias 를 붙일 수 있다.</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token class-name\">ListOfInts</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token class-name\">UserInfo</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ListOfInts</span> <span class=\"token function\">reverseListOfNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListOfInts</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> reversed <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>reversed<span class=\"token punctuation\">;</span> <span class=\"token comment\">// iterable type</span>\n  <span class=\"token keyword\">return</span> reversed<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">String</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserInfo</span> userInfo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hi </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">userInfo<span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">reverseListOfNumbers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [3, 2, 1]</span>\n  <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string-literal\"><span class=\"token string\">\"name\"</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">\"moz\"</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hi moz</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"tag":["노마드코더","플러터","Dart"]},{"id":"8ddeb673-59d1-5cbe-8280-a3957355f006","title":"[노마드코더 플러터]  2023.11.14 Dart 자료형","slug":"nc-flutter-data-types","category":"tech","releaseDate":"2023-11-14T00:00+09:00","headerImage":{"url":"https://images.ctfassets.net/vpyfljks33op/6vgKYVoEVzEErF7RDCe3gb/6f83763e348cca88c94b8b8b5f0f7fa4/Screen_Shot_2021-02-10_at_9.40.45_AM.png"},"contents":{"childMarkdownRemark":{"html":"<h3>Dart 자료형의 특징</h3>\n<ul>\n<li>모든 자료형은 Object 이다.</li>\n</ul>\n<h3>기본 자료형</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/* 문자열 */</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"moz\"</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 큰따옴표 OK</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 작은따옴표 OK</span>\n\n<span class=\"token comment\">/* 불리언 */</span>\nbool alive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// or false</span>\n\n<span class=\"token comment\">/* 숫자형 */</span>\nint age <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\ndouble money <span class=\"token operator\">=</span> <span class=\"token number\">69.99</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// int, double 둘 다 허용이 가능한 변수는 num</span>\n<span class=\"token comment\">// int 와 double 의 부모 클래스이다.</span>\nnum x <span class=\"token operator\">=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// int OK</span>\nx <span class=\"token operator\">=</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// double OK</span></code></pre></div>\n<h3>String Interpolation</h3>\n<ul>\n<li>문자열에 변수를 추가하는 법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> greeting <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"Hello everyone, my name is </span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">name</span></span><span class=\"token string\"> and I'm </span><span class=\"token interpolation\"><span class=\"token punctuation\">${</span><span class=\"token expression\">age <span class=\"token operator\">+</span> <span class=\"token number\">2</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>List</h3>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">/* 리스트를 사용하는 두가지 방식 */</span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>int<span class=\"token punctuation\">></span></span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token comment\">/* collection if */</span>\n<span class=\"token keyword\">var</span> giveMeFive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>giveMeFive<span class=\"token punctuation\">)</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* collection for */</span>\n<span class=\"token keyword\">var</span> oldFriends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span> <span class=\"token string-literal\"><span class=\"token string\">'tiq'</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> newFriends <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'goo'</span></span><span class=\"token punctuation\">,</span> \n\t<span class=\"token string-literal\"><span class=\"token string\">'sik'</span></span><span class=\"token punctuation\">,</span> \n\t<span class=\"token string-literal\"><span class=\"token string\">'jin'</span></span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> friend <span class=\"token keyword\">in</span> oldFriends<span class=\"token punctuation\">)</span> <span class=\"token string-literal\"><span class=\"token string\">\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">$</span><span class=\"token expression\">friend</span></span><span class=\"token string\">\"</span></span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Maps</h3>\n<ul>\n<li>key, value 는 어떤 자료형도 사용 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 컴파일러가 타입 추론 - Map&lt;String, Object></span>\n<span class=\"token keyword\">var</span> player <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'xp'</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">19.99</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'superpower'</span></span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// var 대신 명시적으로 이렇게 사용 가능</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> player <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'name'</span></span><span class=\"token punctuation\">:</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'xp'</span></span><span class=\"token punctuation\">:</span> <span class=\"token number\">19.99</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string-literal\"><span class=\"token string\">'superpower'</span></span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<h3>Sets</h3>\n<ul>\n<li>모든 아이템은 유니크하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 컴파일러가 타입 추론 - Set&lt;int></span>\n<span class=\"token keyword\">var</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nnumbers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error 는 나지않지만 결과 : {1, 2, 3}</span></code></pre></div>"}},"tag":["노마드코더","플러터","Dart"]},{"id":"0a3d7428-bc19-5fa6-9932-7ca4ee9aac57","title":"[노마드코더 플러터]  2023.11.13 Dart 소개와 Variables (변수)","slug":"nc-flutter-intro-variables","category":"tech","releaseDate":"2023-11-13T00:00+09:00","headerImage":{"url":"https://images.ctfassets.net/vpyfljks33op/6gvH7DQMU83w7JQ7ifelJY/13471e478ab8ef1822660ad5a7977f12/Screen_Shot_2021-02-10_at_9.40.16_AM.png"},"contents":{"childMarkdownRemark":{"html":"<h3>Dart 소개</h3>\n<ul>\n<li>Dart 는 UI 에 최적화 되어 있다.</li>\n<li>Dart 는 두개의 컴파일러 (Dart Web, Dart Native) 를 갖고 있다.\n<ul>\n<li>Dart Web : dart to javascript compiler</li>\n<li>Dart Native : dart to multiple architecture of different CPU (IOS, Android, Windows, Linux, Mac &#x26; IOT ..) compiler</li>\n</ul>\n</li>\n<li>Compile 방식\n<ul>\n<li>AOT (ahead-of-time)\n<ul>\n<li>컴파일을 먼저하고, 그 결과인 바이너리를 배포</li>\n<li>개발이 완료가 되면 사용</li>\n</ul>\n</li>\n<li>JIT (just-in-time)\n<ul>\n<li>개발중일 때만 사용</li>\n<li>dart VM 을 사용해서 코드의 결과를 즉시 화면에 보여줌</li>\n<li>가상머신에서 동작하는 거라 조금 느림</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Null safety 를 도입</li>\n<li>Flutter 에서 Dart 를 도입한 이유\n<ul>\n<li>AOT 와 JIT 둘다 제공</li>\n<li>구글이 Flutter 와 Dart 를 만들었음 (ex. Flutter 를 위해 Dart 를 최적화할 수 있음)</li>\n</ul>\n</li>\n</ul>\n<h3>Dart Playground</h3>\n<ul>\n<li><a href=\"https://dartpad.dev/\">DartPad</a></li>\n</ul>\n<h3>Variables (변수)</h3>\n<ul>\n<li>\n<p>Dart 는 항상 void main() 에서 시작한다.</p>\n</li>\n<li>\n<p>문장은 항상 세미콜론(;) 으로 끝난다.</p>\n</li>\n<li>\n<p>변수를 수정할 때는 항상 같은 타입으로만 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// 관습적으로 함수나 메소드 내부의 지역 변수를 선언할 때는 var 를 사용</span>\n<span class=\"token comment\">// var 를 쓰든 타입을 지정하든 상관없지만 관습을 따름</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 추론</span>\nname <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n</li>\n<li>\n<p>명시적으로 타입 지정하는 것도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token comment\">// class 에서 변수나 property 를 선언할 때는 타입을 지정</span>\n<span class=\"token comment\">// var 를 쓰든 타입을 지정하든 상관없지만 관습을 따름</span>\n<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>dynamic 여러가지 타입을 가질 수 있는 변수에 쓰는 키워드 (추천하지 않지만 유용한 경우가 있음)</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">var</span> name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값이 할당되지 않았으므로 name 은 dynamic 타입을 가지게 됨</span>\nname <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nname <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\nname <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n</li>\n<li>\n<p>null safety</p>\n<ul>\n<li>\n<p>개발자가 null 값을 참조할 수 없도록 해서 컴파일 전에 null 에러를 잡기 위함</p>\n</li>\n<li>\n<p>null 이 될 수 있는 변수 지정</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token class-name\">String</span><span class=\"token operator\">?</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null safety</span>\nname <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span>\n\nname<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>isNotEmpty<span class=\"token punctuation\">;</span> <span class=\"token comment\">// name 이 null 이 아니면 isNotEmpty 수행</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>final 키워드</p>\n<ul>\n<li>재할당하지 못하는 변수를 정의함 (const 와 다름)</li>\n<li>런타임에 할당 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">final</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'tiq'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Type 지정도 가능</span></code></pre></div>\n</li>\n<li>\n<p>late 는 초기 데이터 없이 변수 선언을 가능하게 함</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\">late <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error (값이 할당되지 않은 상태에서 접근할 수 없음)</span>\n\n<span class=\"token comment\">// API 를 호출하여 데이터를 받아온 후 아래 단계 진행</span>\nname <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'moz'</span></span><span class=\"token punctuation\">;</span>\nname <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span></code></pre></div>\n</li>\n<li>\n<p>const 키워드는 컴파일 타임에 이미 할당해서 (알고 있는 값) 사용</p>\n<ul>\n<li>\n<p>javascript 의 const 는 Dart 의 final 과 유사</p>\n</li>\n<li>\n<p>런타임에 할당 불가</p>\n<div class=\"gatsby-highlight\" data-language=\"dart\"><pre class=\"language-dart\"><code class=\"language-dart\"><span class=\"token keyword\">const</span> API <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">'https://api.com/api'</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> API <span class=\"token operator\">=</span> <span class=\"token function\">fetchApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error</span>\n\n<span class=\"token keyword\">final</span> API <span class=\"token operator\">=</span> <span class=\"token function\">fetchApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>"}},"tag":["노마드코더","플러터","Dart"]}]}},"pageContext":{}},"staticQueryHashes":["3184728746"],"slicesMap":{}}